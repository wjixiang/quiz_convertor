/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    A1Quiz: ClassViewer<'A1Quiz', "type" | "class" | "unit" | "tags" | "question" | "options" | "answer" | "analysis" | "source">;
    
    A2Quiz: ClassViewer<'A2Quiz', "type" | "class" | "unit" | "tags" | "question" | "options" | "answer" | "analysis" | "source">;
    
    A3PreQuiz: ClassViewer<'A3PreQuiz', "mainQuestion" | "subQuestion">;
    
    BPreQuiz: ClassViewer<'BPreQuiz', "shared_options" | "questions">;
    
    BasicQuiz: ClassViewer<'BasicQuiz', "type" | "question" | "options" | "answer">;
    
    ContentSlice: ClassViewer<'ContentSlice', "start" | "end">;
    
    QAunit: ClassViewer<'QAunit', "question" | "options" | "answer">;
    
    QAunitForB: ClassViewer<'QAunitForB', "question" | "answer">;
    
    QuestionAnswerPair: ClassViewer<'QuestionAnswerPair', "question" | "answer" | "type">;
    
    QuestionAnswerSlice: ClassViewer<'QuestionAnswerSlice', "type" | "question_range" | "answer">;
    
    QuestionAnswerWithAnalysisSlice: ClassViewer<'QuestionAnswerWithAnalysisSlice', "type" | "question_range" | "answer_range" | "answer">;
    
    QuizAnalysis: ClassViewer<'QuizAnalysis', "point" | "discuss" | "ai_analysis" | "link">;
    
    QuizOptions: ClassViewer<'QuizOptions', "oid" | "text">;
    
    Resume: ClassViewer<'Resume', "name" | "email" | "experience" | "skills">;
    
    SplitText: ClassViewer<'SplitText', "questions" | "answers">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "A1Quiz","A2Quiz","A3PreQuiz","BPreQuiz","BasicQuiz","ContentSlice","QAunit","QAunitForB","QuestionAnswerPair","QuestionAnswerSlice","QuestionAnswerWithAnalysisSlice","QuizAnalysis","QuizOptions","Resume","SplitText",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.A1Quiz = this.tb.classViewer("A1Quiz", [
          "type","class","unit","tags","question","options","answer","analysis","source",
        ]);
        
        this.A2Quiz = this.tb.classViewer("A2Quiz", [
          "type","class","unit","tags","question","options","answer","analysis","source",
        ]);
        
        this.A3PreQuiz = this.tb.classViewer("A3PreQuiz", [
          "mainQuestion","subQuestion",
        ]);
        
        this.BPreQuiz = this.tb.classViewer("BPreQuiz", [
          "shared_options","questions",
        ]);
        
        this.BasicQuiz = this.tb.classViewer("BasicQuiz", [
          "type","question","options","answer",
        ]);
        
        this.ContentSlice = this.tb.classViewer("ContentSlice", [
          "start","end",
        ]);
        
        this.QAunit = this.tb.classViewer("QAunit", [
          "question","options","answer",
        ]);
        
        this.QAunitForB = this.tb.classViewer("QAunitForB", [
          "question","answer",
        ]);
        
        this.QuestionAnswerPair = this.tb.classViewer("QuestionAnswerPair", [
          "question","answer","type",
        ]);
        
        this.QuestionAnswerSlice = this.tb.classViewer("QuestionAnswerSlice", [
          "type","question_range","answer",
        ]);
        
        this.QuestionAnswerWithAnalysisSlice = this.tb.classViewer("QuestionAnswerWithAnalysisSlice", [
          "type","question_range","answer_range","answer",
        ]);
        
        this.QuizAnalysis = this.tb.classViewer("QuizAnalysis", [
          "point","discuss","ai_analysis","link",
        ]);
        
        this.QuizOptions = this.tb.classViewer("QuizOptions", [
          "oid","text",
        ]);
        
        this.Resume = this.tb.classViewer("Resume", [
          "name","email","experience","skills",
        ]);
        
        this.SplitText = this.tb.classViewer("SplitText", [
          "questions","answers",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}