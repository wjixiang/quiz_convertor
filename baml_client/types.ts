/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface A1Quiz {
  type: "A1"
  class: string
  unit: string
  tags: string[]
  question: string
  options: QuizOptions[]
  answer: "A" | "B" | "C" | "D" | "E"
  analysis: QuizAnalysis
  source: string
  
}

export interface A2Quiz {
  type: "A2"
  class: string
  unit: string
  tags: string[]
  question: string
  options: QuizOptions[]
  answer: "A" | "B" | "C" | "D" | "E"
  analysis: QuizAnalysis
  source: string
  
}

export interface A3PreQuiz {
  mainQuestion: string
  subQuestion: QAunit[]
  
}

export interface BPreQuiz {
  shared_options: QuizOptions[]
  questions: QAunitForB[]
  
}

export interface BasicQuiz {
  type: "single" | "multiple" | "share_question" | "share_option"
  question: string
  options: string[]
  answer: string
  
}

export interface ContentSlice {
  start: number
  end: number
  
}

export interface QAunit {
  question: string
  options: QuizOptions[]
  answer: string
  
}

export interface QAunitForB {
  question: string
  answer: string
  
}

export interface QuestionAnswerPair {
  question: string
  answer: string
  type: "single" | "multiple" | "share_question" | "share_option"
  
}

export interface QuestionAnswerSlice {
  type: "single" | "multiple" | "share_question" | "share_option"
  question_range: number[]
  answer: string
  
}

export interface QuestionAnswerWithAnalysisSlice {
  type: "single" | "multiple" | "share_question" | "share_option"
  question_range: number[]
  answer_range: string
  answer: string
  
}

export interface QuizAnalysis {
  point?: string | null
  discuss?: string | null
  ai_analysis?: string | null
  link: string[]
  
}

export interface QuizOptions {
  oid: "A" | "B" | "C" | "D" | "E"
  text: string
  
}

export interface Resume {
  name: string
  email: string
  experience: string[]
  skills: string[]
  
}

export interface SplitText {
  questions: string
  answers: string
  
}
