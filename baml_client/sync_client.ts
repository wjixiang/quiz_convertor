/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, ClientRegistry, Collector } from "@boundaryml/baml"
import { toBamlError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type * as types from "./types"
import type {A3PreQuiz, BPreQuiz, BasicQuiz, ContentSlice, QAunit, QAunitForB, QuestionAnswerPair, QuestionAnswerSlice, QuestionAnswerWithExplanationPair, QuestionAnswerWithExplanationSlice, QuizAnalysis, QuizOptions, Resume, SplitText} from "./types"
import type TypeBuilder from "./type_builder"
import { HttpRequest, HttpStreamRequest } from "./sync_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, private bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  ConvertToA3Quiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): A3PreQuiz {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "ConvertToA3Quiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as A3PreQuiz
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): BPreQuiz {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "ConvertToBQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as BPreQuiz
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBasicQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): BasicQuiz {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "ConvertToBasicQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as BasicQuiz
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): Resume {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as Resume
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswers(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): QuestionAnswerSlice[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "MatchQuestionsAnswers",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as QuestionAnswerSlice[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswersWithExplanation(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): QuestionAnswerWithExplanationSlice[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "MatchQuestionsAnswersWithExplanation",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as QuestionAnswerWithExplanationSlice[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SplitPage(
      parsedText: string,chunkNum: number,
      __baml_options__?: BamlCallOptions
  ): ContentSlice[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "SplitPage",
        {
          "parsedText": parsedText,"chunkNum": chunkNum
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as ContentSlice[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SplitQuestions(
      questions_text: string,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const env = options.env ? { ...process.env, ...options.env } : { ...process.env };
      const raw = this.runtime.callFunctionSync(
        "SplitQuestions",
        {
          "questions_text": questions_text
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)