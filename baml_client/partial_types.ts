/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  A3PreQuiz,  BPreQuiz,  BasicQuiz,  Chunks,  ContentSlice,  QAunit,  QAunitForB,  QuestionAnswerPair,  QuestionAnswerSlice,  QuestionAnswerWithExplanationPair,  QuestionAnswerWithExplanationSlice,  QuizAnalysis,  QuizOptions,  Resume,  SplitText } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
    value: T
    state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    
    export interface A3PreQuiz {
        clas?: (string | null)
        mainQuestion?: (string | null)
        subQuestion?: (partial_types.QAunit | null)[]
        explanation: ((string | null) | null)
    }
    
    export interface BPreQuiz {
        clas?: (string | null)
        shared_options?: (partial_types.QuizOptions | null)[]
        questions?: (partial_types.QAunitForB | null)[]
        explanation: ((string | null) | null)
    }
    
    export interface BasicQuiz {
        type?: ("single" | "multiple" | "share_question" | "share_option" | null)
        clas?: (string | null)
        question?: (string | null)
        options?: (string | null)[]
        answer?: (string | null)
        explanation: ((string | null) | null)
    }
    
    export interface Chunks {
        question?: (partial_types.ContentSlice | null)
        answer?: (partial_types.ContentSlice | null)
    }
    
    export interface ContentSlice {
        start?: (number | null)
        end?: (number | null)
    }
    
    export interface QAunit {
        question?: (string | null)
        options?: (partial_types.QuizOptions | null)[]
        answer?: (string | null)
    }
    
    export interface QAunitForB {
        question?: (string | null)
        answer?: (string | null)
    }
    
    export interface QuestionAnswerPair {
        type?: ("single" | "multiple" | "share_question" | "share_option" | null)
        question?: (string | null)
        answer?: (string | null)
    }
    
    export interface QuestionAnswerSlice {
        type?: ("single" | "multiple" | "share_question" | "share_option" | null)
        question_range?: (number | null)[]
        answer?: (string | null)
    }
    
    export interface QuestionAnswerWithExplanationPair {
        type?: ("single" | "multiple" | "share_question" | "share_option" | null)
        question?: (string | null)
        answer?: (string | null)
        explanation?: (string | null)
    }
    
    export interface QuestionAnswerWithExplanationSlice {
        type?: ("single" | "multiple" | "share_question" | "share_option" | null)
        question_range?: (number | null)[]
        answer_range?: (number | null)[]
        answer?: (string | null)
    }
    
    export interface QuizAnalysis {
        point: ((string | null) | null)
        discuss: ((string | null) | null)
        ai_analysis: ((string | null) | null)
        link?: (string | null)[]
    }
    
    export interface QuizOptions {
        oid?: ("A" | "B" | "C" | "D" | "E" | null)
        text?: (string | null)
    }
    
    export interface Resume {
        name?: (string | null)
        email?: (string | null)
        experience?: (string | null)[]
        skills?: (string | null)[]
    }
    
    export interface SplitText {
        questions?: (string | null)
        answers?: (string | null)
    }
    
}