/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  A1Quiz,  A2Quiz,  A3PreQuiz,  BPreQuiz,  BasicQuiz,  ContentSlice,  QAunit,  QAunitForB,  QuestionAnswerPair,  QuestionAnswerSlice,  QuestionAnswerWithExplanationPair,  QuestionAnswerWithExplanationSlice,  QuizAnalysis,  QuizOptions,  Resume,  SplitText } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface A1Quiz {
      type?: "A1" | null
      class?: string | null
      unit?: string | null
      tags: string[]
      question?: string | null
      options: QuizOptions[]
      answer?: "A" | "B" | "C" | "D" | "E" | null
      analysis?: QuizAnalysis | null
      source?: string | null
    }
    export interface A2Quiz {
      type?: "A2" | null
      class?: string | null
      unit?: string | null
      tags: string[]
      question?: string | null
      options: QuizOptions[]
      answer?: "A" | "B" | "C" | "D" | "E" | null
      analysis?: QuizAnalysis | null
      source?: string | null
    }
    export interface A3PreQuiz {
      mainQuestion?: string | null
      subQuestion: QAunit[]
      explanation?: string | null
    }
    export interface BPreQuiz {
      shared_options: QuizOptions[]
      questions: QAunitForB[]
      explanation?: string | null
    }
    export interface BasicQuiz {
      type?: "single" | "multiple" | "share_question" | "share_option" | null
      question?: string | null
      options: string[]
      answer?: string | null
      explanation?: string | null
    }
    export interface ContentSlice {
      start?: number | null
      end?: number | null
    }
    export interface QAunit {
      question?: string | null
      options: QuizOptions[]
      answer?: string | null
    }
    export interface QAunitForB {
      question?: string | null
      answer?: string | null
    }
    export interface QuestionAnswerPair {
      type?: "single" | "multiple" | "share_question" | "share_option" | null
      question?: string | null
      answer?: string | null
    }
    export interface QuestionAnswerSlice {
      type?: "single" | "multiple" | "share_question" | "share_option" | null
      question_range: number[]
      answer?: string | null
    }
    export interface QuestionAnswerWithExplanationPair {
      type?: "single" | "multiple" | "share_question" | "share_option" | null
      question?: string | null
      answer?: string | null
      explanation?: string | null
    }
    export interface QuestionAnswerWithExplanationSlice {
      type?: "single" | "multiple" | "share_question" | "share_option" | null
      question_range: number[]
      answer_range: number[]
      answer?: string | null
    }
    export interface QuizAnalysis {
      point?: string | null
      discuss?: string | null
      ai_analysis?: string | null
      link: string[]
    }
    export interface QuizOptions {
      oid?: "A" | "B" | "C" | "D" | "E" | null
      text?: string | null
    }
    export interface Resume {
      name?: string | null
      email?: string | null
      experience: string[]
      skills: string[]
    }
    export interface SplitText {
      questions?: string | null
      answers?: string | null
    }
}