/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {A3PreQuiz, BPreQuiz, BasicQuiz, ContentSlice, QAunit, QAunitForB, QuestionAnswerPair, QuestionAnswerSlice, QuestionAnswerWithExplanationPair, QuestionAnswerWithExplanationSlice, QuizAnalysis, QuizOptions, Resume, SplitText} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class HttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ConvertToA3Quiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToA3Quiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToBQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBasicQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToBasicQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswers(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "MatchQuestionsAnswers",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswersWithExplanation(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "MatchQuestionsAnswersWithExplanation",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SplitPage(
      parsedText: string,chunkNum: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "SplitPage",
        {
          "parsedText": parsedText,"chunkNum": chunkNum
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SplitQuestions(
      questions_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "SplitQuestions",
        {
          "questions_text": questions_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class HttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  ConvertToA3Quiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToA3Quiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToBQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ConvertToBasicQuiz(
      question: string,answer: string,explanation?: string | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ConvertToBasicQuiz",
        {
          "question": question,"answer": answer,"explanation": explanation?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswers(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "MatchQuestionsAnswers",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  MatchQuestionsAnswersWithExplanation(
      input: SplitText,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "MatchQuestionsAnswersWithExplanation",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SplitPage(
      parsedText: string,chunkNum: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "SplitPage",
        {
          "parsedText": parsedText,"chunkNum": chunkNum
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SplitQuestions(
      questions_text: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return this.runtime.buildRequestSync(
        "SplitQuestions",
        {
          "questions_text": questions_text
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}